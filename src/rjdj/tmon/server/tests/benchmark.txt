##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of T-Mon.
#
# T-Mon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# T-Mon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with T-Mon. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

=====================================
$ Benchmarking
=====================================
    >>> import base64
    >>> import hashlib
    >>> import time
    >>> import json
    >>> from rjdj.tmon.server.models import WebService
    >>> from django.contrib.auth.models import User 
    >>> from Crypto.Cipher import AES
    >>> from pprint import pprint
    >>> from rjdj.djangotornado.testing import TestClient as Client
    >>> from rjdj.tmon.server.urls import tornado_urls
    
    >>> RUNS = 1000

Preparations:
-------------
    >>> c = Client(tornado_urls)
    >>> TEST_URL = "/data/collect"
    >>> TEST_SECRET = "A" * 32

    >>> user = User()
    >>> user.username = "another_testuser"
    >>> user.set_password("!test")
    >>> user.email = "test@test.com"
    >>> user.save()

    >>> ws = WebService()    
    >>> ws.owner = user
    >>> ws.secret = TEST_SECRET
    >>> ws.name = "_".join(("testdb", hashlib.md5(str(time.time())).hexdigest()))
    >>> ws.save()


Helper functions:
----------------
    >>> def make_package(data, wsid):
    ...     payload = AES.new(TEST_SECRET, AES.MODE_CFB).encrypt(json.dumps(data))
    ...     encoded_payload = base64.b64encode(payload)
    ...     return  { "data" : encoded_payload, "wsid" : wsid }
    
    
    >>> request = { 
    ...         "ip": "72.32.231.8",
    ...         "useragent": "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac)",
    ...         "url": "/" }
    
    >>> pkg = make_package(request, ws.id)    
    >>> times = []
    >>> for r in xrange(RUNS):
    ...     start = time.time()
    ...     x = c.post(TEST_URL, pkg)
    ...     times.append(time.time() - start)
    >>> print sum(times) / RUNS
    
    
    
    
    
    
    
    
    
    
