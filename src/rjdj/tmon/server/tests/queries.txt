##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of T-Mon.
#
# T-Mon is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# T-Mon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with T-Mon. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

=====================================
$ Tests for queries
=====================================

    >>> import json
    >>> import base64
    >>> import hashlib
    >>> import time
    >>> from rjdj.tmon.server.models import WebService
    >>> from django.contrib.auth.models import User 
    >>> from Crypto.Cipher import AES
    >>> from django.test import Client
    >>> from rjdj.tmon.server.utils.parser import TrackingRequestParser
    >>> from rjdj.tmon.server.utils import db
    >>> from rjdj.tmon.server.utils import queries


Helper function:
---------------
    >>> def make_post_data_dict(data, wsid):
    ...     payload = json.dumps(data)
    ...     cipher = AES.new(TEST_SECRET, AES.MODE_CFB)
    ...     encryped_payload = cipher.encrypt(payload)
    ...     encoded_payload = base64.b64encode(encryped_payload)
    ...     return { "data" : encoded_payload, "wsid" : wsid }

Preparation:
------------
    >>> TEST_SECRET = "AAAAAAABCDEFABCDEFABCDEF"

    >>> user = User()
    >>> user.username = "another_testuser"
    >>> user.set_password("!test")
    >>> user.email = "test@test.com"
    >>> user.save()

    >>> ws = WebService()    
    >>> ws.owner = user
    >>> ws.secret = TEST_SECRET
    >>> ws.name = "_".join(("testdb", hashlib.md5(str(time.time())).hexdigest()))
    >>> ws.save()
    
    >>> useragents = [ "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405",
    ...                "Mozilla/5.0 (Linux; U; Android 2.2.1; fr-ch; A43 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
    ...                "Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3" ]
    >>> ips = [ "72.32.231.8",
    ...         "194.232.104.140",
    ...         "213.131.233.151" ]
    
    >>> webservices = [ "/register", "/login", "/get/data/from/something" ]

    >>> for i in xrange(len(useragents)):
    ...     ws, doc = TrackingRequestParser.create_document(make_post_data_dict({
    ...                                                     "url": webservices[i], 
    ...                                                     "useragent": useragents[i], 
    ...                                                     "ip": ips[i]}, ws.id))
    ...     db.store(doc, ws.id)
    
Now for some queries:
---------------------
    >>> query = queries.users_per_country
    >>> for result in db.execute(query, ws.id):
    ...     print result
    <Row key=[... 'AUT'], value=1>
    <Row key=[... 'DEU'], value=1>
    <Row key=[... 'USA'], value=1>

    
    >>> query = queries.users_per_city
    >>> for result in db.execute(query, ws.id):
    ...     print result
    <Row key=[... 'New York (USA)'], value=1>

    >>> query = queries.users_per_device
    >>> for result in db.execute(query, ws.id):
    ...     print result
    <Row key='iPad', value=1>
    <Row key='iPhone', value=1>
    <Row key='Linux', value=1>

    >>> query = queries.users_per_os
    >>> for result in db.execute(query, ws.id):
    ...     print result
    <Row key='Android 2.2.1', value=1>
    <Row key='CPU like Mac OS X', value=1>
    <Row key='CPU OS 3_2_1 like Mac OS X', value=1>

    >>> query = queries.users_locations
    >>> for result in sorted(db.execute(query, ws.id), key = lambda x: x["key"][0]):
    ...     print result
    <Row key=[...], value=1>
    <Row key=[...], value=1>
    <Row key=[...], value=1>



    >>> query = queries.request_count
    >>> for result in db.execute(query, ws.id):
    ...     print result
    <Row key=[..., ..., ..., ..., ..., ...], value=3>

