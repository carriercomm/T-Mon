##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of T-Mon.
#
# T-Mon is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# T-Mon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with T-Mon. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

=====================================
$ Tests for CouchDBViews
=====================================

    >>> import json
    >>> import base64
    >>> import hashlib
    >>> import time
    >>> from rjdj.tmon.server.models import WebService, TrackingData
    >>> from rjdj.tmon.server.couchdbviews.couchdbkeys import CouchDBKeys as Keys
    >>> from django.contrib.auth.models import User 
    >>> from Crypto.Cipher import AES
    >>> from django.test import Client
    >>> from rjdj.tmon.server.utils.bulkinsert_manager import bulkinsert

Helper function:
---------------
    >>> def make_post_data_dict(data, wsid):
    ...     payload = json.dumps(data)
    ...     cipher = AES.new(TEST_SECRET, AES.MODE_CFB)
    ...     encryped_payload = cipher.encrypt(payload)
    ...     encoded_payload = base64.b64encode(encryped_payload)
    ...     return { "data" : encoded_payload, "wsid" : wsid }

Preparation:
------------
    >>> TEST_SECRET = "AAAAAAABCDEFABCDEFABCDEF"

    >>> user = User()
    >>> user.username = "another_testuser"
    >>> user.set_password("!test")
    >>> user.email = "test@test.com"
    >>> user.save()

    >>> ws = WebService()    
    >>> ws.owner = user
    >>> ws.secret = TEST_SECRET
    >>> ws.name = "_".join(("testdb", hashlib.md5(str(time.time())).hexdigest()))
    >>> ws.save()
    
    >>> docs = [    
    ... {Keys.IP: "72.32.231.8",
    ...  Keys.COUNTRY: "AUT",
    ...  Keys.CITY: "Vienna",
    ...  Keys.LONGITUDE: 48.214, 
    ...  Keys.LATITUDE: 16.378,
    ...  Keys.USER_AGENT: "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405",
    ...  Keys.URL: "/get/data/from/something",
    ...  Keys.TIMESTAMP: TrackingData.now() },
    ... {Keys.IP: "194.232.104.140",
    ...  Keys.COUNTRY: "USA",
    ...  Keys.CITY: "New York",
    ...  Keys.LONGITUDE: 40.7257, 
    ...  Keys.LATITUDE: -73.986,
    ...  Keys.USER_AGENT: "Mozilla/5.0 (Linux; U; Android 2.2.1; fr-ch; A43 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
    ...  Keys.URL: "/login",
    ...  Keys.TIMESTAMP: TrackingData.now() },
    ... {Keys.IP: "213.131.233.151",
    ...  Keys.COUNTRY: "DEU",
    ...  Keys.CITY: "Berlin",
    ...  Keys.LONGITUDE: 52.518, 
    ...  Keys.LATITUDE: 13.412,
    ...  Keys.USER_AGENT: "Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3",
    ...  Keys.URL: "/register",
    ...  Keys.TIMESTAMP: TrackingData.now() }, ]

    >>> bulkinsert(docs, ws)
    
    
Now for some querying:
-------------------------

    >>> print TrackingData.views.requests_by_city(ws.name)
    [{u'New York (USA)': 1}, {u'Vienna (AUT)': 1}, {u'Berlin (DEU)': 1}]

    >>> print TrackingData.views.requests_by_device(ws.name)
    [{u'iPad': 1}, {u'iPhone': 1}, {u'Linux': 1}]

    >>> print TrackingData.views.requests_by_url(ws.name)
    [{u'/login': 1}, {u'/register': 1}, {u'/get/data/from/something': 1}]

    >>> print TrackingData.views.requests_by_os(ws.name)
    [{u'Android 2.2.1': 1}, {u'CPU OS 3_2_1 like Mac OS X': 1}, {u'CPU like Mac OS X': 1}]

    >>> print TrackingData.views.requests_locations(ws.name)
    [{(13.412, 52.518): 1}, {(-73.986, 40.7257): 1}, {(16.378, 48.214): 1}]

    >>> print TrackingData.views.request_count(ws.name, "minute", 5)
    [{...: 3}]




