##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of T-Mon.
#
# T-Mon is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# T-Mon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with T-Mon. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

==============================
$ Tests for /data/collect
==============================

    >>> import base64
    >>> import hashlib
    >>> import json
    >>> import logging
    >>> import time
    >>> from rjdj.tmon.server.models import WebService
    >>> from django.contrib.auth.models import User 
    >>> from Crypto.Cipher import AES
    >>> #from django.test import Client
    >>> from rjdj.tmon.server import urls
    >>> from rjdj.djangotornado.testing import TestClient
    >>> from django.conf import settings
    >>> from StringIO import StringIO
    
Preparations:
-------------
    >>> c = TestClient(urls.tornado_urls)
    >>> TEST_URL = "/data/collect"
    >>> TEST_SECRET = "AAAAAAABCDEFABCDEFABCDEF"

    >>> user = User()
    >>> user.username = "another_testuser"
    >>> user.set_password("!test")
    >>> user.email = "test@test.com"
    >>> user.save()

    >>> ws = WebService()    
    >>> ws.owner = user
    >>> ws.secret = TEST_SECRET
    >>> ws.name = "_".join(("testdb", hashlib.md5(str(time.time())).hexdigest()))
    >>> ws.save()
    
    >>> logger = logging.getLogger("debug")
    >>>
    >>> valid_output = StringIO()
    >>> str_handler = logging.StreamHandler(valid_output)
    >>> logger.addHandler(str_handler)
    
Helper function:
---------------
    >>> def make_request(url, wsid, req_dict):
    ...     payload = json.dumps(req_dict)
    ...     cipher = AES.new(TEST_SECRET, AES.MODE_CFB)
    ...     encryped_payload = cipher.encrypt(payload)
    ...     encoded_payload = base64.b64encode(encryped_payload)
    ...     res = c.post(url, { "data" : encoded_payload, "wsid" : wsid })
    
Collecting data will, for performance reasons, not respond:
-----------------------------------------------------------
    >>> request = { 
    ...             "ip": "72.32.231.8",
    ...             "useragent": "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac" + \
    ...                          "OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405",
    ...             "url": "/" }
    >>> make_request(TEST_URL, ws.id, request)
    
    >>> request = { 
    ...             "ip": "194.232.104.140",
    ...             "useragent": "Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en)" + \
    ...                          "AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3",
    ...             "url": "/login" }
    >>> make_request(TEST_URL, ws.id, request)
    
    >>> request = { 
    ...             "ip": "213.131.233.151",
    ...             "useragent": "Mozilla/5.0 (Linux; U; Android 2.2.1; fr-ch;" + \
    ...                          "A43 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
    ...             "url": "/register" }
    >>> make_request(TEST_URL, ws.id, request)
    
    
However, an invalid request will produce a log entry at debug level:
-------------------------------------------------------------------

Everything was valid until now:
    >>> print valid_output.getvalue()
    request took 0:00:00...
    request took 0:00:00...
    request took 0:00:00...
    <BLANKLINE>

No data:
    >>> logger.removeHandler(str_handler)
    >>> no_data_output = StringIO()
    >>> str_handler = logging.StreamHandler(no_data_output)
    >>> logger.addHandler(str_handler)    
    
    >>> request = {}
    >>> make_request(TEST_URL, ws.id, request)
    >>> str_handler.flush()
    >>> print no_data_output.getvalue()
    ip: ip
    url: url
    useragent: useragent
    request took 0:00:00...
    <BLANKLINE>

Invalid keys:
    >>> logger.removeHandler(str_handler)
    >>> invalid_keys_output = StringIO()
    >>> str_handler = logging.StreamHandler(invalid_keys_output)
    >>> logger.addHandler(str_handler)

    >>> request = {"no-ip": "www.url.com", "useragent": "some_user_agent"}
    >>> make_request(TEST_URL, ws.id, request)
    >>> str_handler.flush()
    >>> print invalid_keys_output.getvalue()
    ip: ip
    url: url
    request took 0:00:00...
    <BLANKLINE>

GET is also prohibited:
    >>> res = c.get(TEST_URL)
    >>> res.content
    '<html><title>405: Method Not Allowed</title><body>405: Method Not Allowed</body></html>'


Invalid IPs fail silently:
    >>> logger.removeHandler(str_handler)
    >>> silent_ips_output = StringIO()
    >>> str_handler = logging.StreamHandler(silent_ips_output)
    >>> logger.addHandler(str_handler)

    >>> request = {"ip": "192.168.1.1", "useragent": "some_user_agent", "url": "/"}
    >>> make_request(TEST_URL, ws.id, request)
    
    >>> request = { 
    ...             "ip": "157.205.71.166",
    ...             "useragent": "Mozilla/5.0 (Linux; U; Android 2.2.1; fr-ch;" + \
    ...                          "A43 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
    ...             "url": "/register" }
    >>> make_request(TEST_URL, ws.id, request)
    >>> str_handler.flush()
    >>> print silent_ips_output.getvalue()
    request took 0:00:00...
    request took 0:00:00...
    <BLANKLINE>


