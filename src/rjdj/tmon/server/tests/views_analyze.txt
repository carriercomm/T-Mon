##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of T-Mon.
#
# T-Mon is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# T-Mon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with T-Mon. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

=======================================
$ Tests for the RESTful API (/data/...)
=======================================

    >>> import json
    >>> import base64
    >>> import hashlib
    >>> import time
    >>> import random
    >>> from rjdj.tmon.server.models import WebService, TrackingData
    >>> from rjdj.tmon.server.utils.bulkinsert_manager import bulkinsert
    >>> from rjdj.tmon.server.couchdbviews.couchdbkeys import CouchDBKeys as Keys
    >>> from django.contrib.auth.models import User 
    >>> from Crypto.Cipher import AES
    >>> from django.test import Client


Preparations:
-------------
    >>> c = Client()
    >>> TEST_URL = "/data/collect"
    >>> TEST_SECRET = "AAAAAAABCDEFABCDEFABCDEF"
    
    >>> user = User()
    >>> user.username = "another_testuser"
    >>> user.set_password("!test")
    >>> user.email = "test@test.com"
    >>> user.save()

    >>> ws = WebService()    
    >>> ws.owner = user
    >>> ws.secret = TEST_SECRET
    >>> ws.name = "_".join(("testdb", hashlib.md5(str(random.random() + time.time())).hexdigest()))
    >>> ws.save()
    
    
Helper function:
---------------
    >>> def make_request(url, wsid, req_dict = None):
    ...     if req_dict:
    ...         payload = json.dumps(req_dict)
    ...         cipher = AES.new(TEST_SECRET, AES.MODE_CFB)
    ...         encryped_payload = cipher.encrypt(payload)
    ...         encoded_payload = base64.b64encode(encryped_payload)
    ...         res = c.post(url, { "data" : encoded_payload, "wsid" : wsid })
    ...     else:
    ...         res = c.get("/" + str(wsid) + url)
    ...     return json.loads(res.content)
    
    
Inserting some sample data:
---------------------------
    >>> docs = [    
    ... {Keys.IP: "72.32.231.8",
    ...  Keys.COUNTRY: "AUT",
    ...  Keys.CITY: "Vienna",
    ...  Keys.LONGITUDE: 48.214, 
    ...  Keys.LATITUDE: 16.378,
    ...  Keys.USER_AGENT: "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405",
    ...  Keys.URL: "/get/data/from/something",
    ...  Keys.TIMESTAMP: TrackingData.now() },
    ... {Keys.IP: "194.232.104.140",
    ...  Keys.COUNTRY: "USA",
    ...  Keys.CITY: "New York",
    ...  Keys.LONGITUDE: 40.7257, 
    ...  Keys.LATITUDE: -73.986,
    ...  Keys.USER_AGENT: "Mozilla/5.0 (Linux; U; Android 2.2.1; fr-ch; A43 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",
    ...  Keys.URL: "/login",
    ...  Keys.TIMESTAMP: TrackingData.now() },
    ... {Keys.IP: "213.131.233.151",
    ...  Keys.COUNTRY: "DEU",
    ...  Keys.CITY: "Berlin",
    ...  Keys.LONGITUDE: 52.518, 
    ...  Keys.LATITUDE: 13.412,
    ...  Keys.USER_AGENT: "Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3",
    ...  Keys.URL: "/register",
    ...  Keys.TIMESTAMP: TrackingData.now() }, ]

Finally insert the data:

    >>> bulkinsert(docs, ws)

Now for some requests (GET-API for JavaScript calls):
-----------------------------------------------------

Real-Time Request-Counting API (possible values are second, minute, hour, day and any integer):

    >>> make_request("/data/requests/second/5", ws.id)
    {u'status': 200, u'results': [...]}

    >>> make_request("/data/requests/minute/5", ws.id)
    {u'status': 200, u'results': [...]}

    >>> make_request("/data/requests/hour/3", ws.id)
    {u'status': 200, u'results': [...]}

    >>> make_request("/data/requests/day/3", ws.id)
    {u'status': 200, u'results': [...]}

Retrieve the number of users by country:

    >>> make_request("/data/users/country", ws.id)
    {u'status': 200, u'results': [{u'...': 1}, {u'...': 1}, {u'...': 1}]}
    
.. and by operating system:
    
    >>> make_request("/data/users/os", ws.id)
    {u'status': 200, u'results': [{...}]}

.. and by device:

    >>> make_request("/data/users/device", ws.id)
    {u'status': 200, u'results': [{...}]}
    
.. and by URL:

    >>> make_request("/data/users/url", ws.id)
    {u'status': 200, u'results': [{...}]}

