##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of T-Mon.
#
# T-Mon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# T-Mon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with T-Mon. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

=====================================
$ Tests for Bulkinsertions
=====================================

    >>> from django.conf import settings
    >>> import random
    >>> from rjdj.tmon.server.models import WebService, TrackingData
    >>> from django.contrib.auth.models import User
    >>> from rjdj.tmon.server.utils.bulkinsert_manager import BulkInsertManager
    >>> from rjdj.tmon.server.utils.connection import connection
    >>> import time 
    >>> import hashlib
    
Preparations:
-------------
    >>> TEST_URL = "/data/collect"
    >>> TEST_SECRET = "AAAAAAABCDEFABCDEFABCDEF"
    
    >>> user = User()
    >>> user.username = "another_testuser"
    >>> user.set_password("!test")
    >>> user.email = "test@test.com"
    >>> user.save()

    >>> ws = WebService()    
    >>> ws.owner = user
    >>> ws.secret = TEST_SECRET
    >>> ws.name = "_".join(("testdb", hashlib.md5(str(random.random() + time.time())).hexdigest()))
    >>> ws.save()
    >>> database = connection.database(ws.name)
       
This manager takes care of inserting a batch of data at once to increase efficiency. Therefore calling insert only once will not have any effect, except the DEBUG flag is set in Django's settings. Additionally the batch size can be set there.

The BulkInsertManager can be created without any arguments:

    >>> man = BulkInsertManager("hello")
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes exactly 1 argument (2 given)

    >>> man = BulkInsertManager()
    
Insertion can be done using the insert method:
    
    >>> man.insert()
    Traceback (most recent call last):
    ...
    TypeError: insert() takes exactly 3 arguments (1 given)

    
The arguments require the data to be inserted and a web service that provides the database name:

    >>> man.insert({"test": "debug is true"}, ws)
    
For the DEBUG flag was left unchanged, the data has been inserted immediately:

    >>> for record in database:
    ...     if not record.startswith("_"):
    ...         print database[record]
    <Document u'...'@u'...' {u'test': u'debug is true'}>

    
To see if the batch insertion works, DEBUG is set to false and the MAX_BATCH_ENTRIES is lowered:

    >>> settings.DEBUG = False
    >>> settings.MAX_BATCH_ENTRIES = 5
    
    >>> man.insert({"test": "debug is false"}, ws)
    
This entry is not being inserted yet ..

    >>> for record in database:
    ...     if not record.startswith("_"):
    ...         print database[record]
    <Document u'...'@u'...' {u'test': u'debug is true'}>
    
    >>> man.insert({"test": "debug is false"}, ws)
    >>> man.insert({"test": "debug is false"}, ws)
    >>> man.insert({"test": "debug is false"}, ws)
    >>> man.insert({"test": "debug is false"}, ws)
    >>> man.insert({"test": "debug is false"}, ws)

In order to have correct results, we should wait for the asynchronous job to finish:
    
    >>> time.sleep(2)
    
Now after adding some more records, the batch was inserted:

    >>> for record in database:
    ...     if not record.startswith("_"):
    ...         print database[record]
    <Document u'...'@u'...' {u'test': u'debug is true'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    
It is also possible to flush the manager and insert anything that is cached 
at the moment:

    >>> man.insert({"test": "flushing rocks!"}, ws)
    >>> man.insert({"test": "flushing rocks!"}, ws)
    >>> man.insert({"test": "flushing rocks!"}, ws)
    
    >>> man.flush()
    
Consequently the results will be shown:

    >>> for record in database:
    ...     if not record.startswith("_"):
    ...         print database[record]
    <Document u'...'@u'...' {u'test': u'debug is true'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'debug is false'}>
    <Document u'...'@u'...' {u'test': u'flushing rocks!'}>
    <Document u'...'@u'...' {u'test': u'flushing rocks!'}>
    <Document u'...'@u'...' {u'test': u'flushing rocks!'}>

